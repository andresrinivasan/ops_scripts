#!/usr/bin/env ruby

require 'fileutils'
require 'erb'

module_name = ARGV[0]

########################################################
# Check to make sure this is possible
if module_name.nil?
  puts "Takes module name as a first argument"
  exit! 1
end

unless Dir.pwd.split('/')[-1] == 'modules'
  puts "Need to be in your modules directory"
  exit! 1
end


########################################################
# Create the directories
[ 'templates', 'manifests', 'files' ].each do |mydir|
  FileUtils.mkpath("#{module_name}/#{mydir}")
end

########################################################
# Create the readme file
readme_template = ERB.new <<-EOF
<%= module_name %> <% underline = ''%><% (1..module_name.length).each {|i| underline += '='} %>
<%= underline %>

EOF
readme=File.open("#{module_name}/Readme.md", 'w')
readme.puts readme_template.result(binding)
readme.close

########################################################
#  build the init file
init_template = ERB.new <<-EOF
# Init for <%= module_name %>
class <%= module_name %> {<% ['packages', 'configure', 'services'].each do |s| %>
  include <%= module_name %>::<%= s %><% end %>
}
EOF

init=File.open("#{module_name}/manifests/init.pp", 'w')
init.puts init_template.result(binding)
init.close

########################################################
# Generate the manifest files
['packages', 'configure', 'services'].each do |manifest|
  manifest_file=File.open("#{module_name}/manifests/#{manifest}.pp", 'w')
  manifest_file.puts "# #{module_name}::#{manifest} setup\nclass #{module_name}::#{manifest}{\n  \n}"
  manifest_file.close
end

########################################################
# RSPEC init
Dir.chdir module_name
require 'rubygems'
version = ">= 0"
if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
    version = $1
    ARGV.shift
  end
end
gem 'rspec-puppet', version
load Gem.bin_path('rspec-puppet', 'rspec-puppet-init', version)

# fix opts for rspec
sopts=File.open('spec/spec.opts', 'w')
sopts.puts '--deprecation-out /dev/null'
sopts.close

# fix helper file
helper = %{
require 'rspec-puppet'
require 'hiera'

fixture_path = File.expand_path(File.join(__FILE__, '..', 'fixtures'))

RSpec.configure do |c|
  c.color = true
  c.module_path = File.join(fixture_path, 'modules')
  c.manifest_dir = File.join(fixture_path, 'manifests')
end
}
helper_file=File.open('spec/spec_helper.rb', 'w')
helper_file.puts helper
helper_file.close

########################################################
# Rakefile
rake = <<-eos
# TRULIA_RAKE
require 'rake'
require 'rspec/core/rake_task'

desc "Run all RSpec code examples"
RSpec::Core::RakeTask.new(:rspec) do |t|
  t.rspec_opts = File.read("spec/spec.opts").chomp || ""
end

SPEC_SUITES = (Dir.entries('spec') - ['.', '..','fixtures']).select {|e| File.directory? "spec/\#{e}" }
namespace :rspec do
  SPEC_SUITES.each do |suite|
    desc "Run \#{suite} RSpec code examples"
    RSpec::Core::RakeTask.new(suite) do |t|
      t.pattern = "spec/\#{suite}/**/*_spec.rb"
      t.rspec_opts = File.read("spec/spec.opts").chomp || ""
    end
  end
end
task :default => :rspec

begin
  if Gem::Specification::find_by_name('puppet-lint')
    require 'puppet-lint/tasks/puppet-lint'
    PuppetLint.configuration.ignore_paths = ["spec/**/*.pp", "vendor/**/*.pp"]
    PuppetLint.configuration.send("disable_80chars")
    PuppetLint.configuration.send("disable_autoloader_layout")
    task :default => [:rspec, :lint]
  end
rescue Gem::LoadError
end
eos
rake_file=File.open('spec/spec_helper.rb', 'w')
rake_file.puts helper
rake_file.close
########################################################
# site.pp
site_file=File.open('spec/fixtures/manifests/site.pp', 'a')
site_file.puts "hiera_include('classes')"
site_file.close

# setup hiera
FileUtils.mkpath('spec/fixtures/hiera')
hstring = %Q{
---
:backends:
  - yaml
:hierarchy:
  - "%{fqdn}"
  - test
:yaml:
  :datadir: 'spec/fixtures/hiera'
:merge_behavior: deeper
}
hfile=File.open('spec/fixtures/hiera/hiera.yaml', 'w')
hfile.puts hstring
hfile.close

# setup test.yaml
teststring = %Q{
---
classes:
  - #{module_name}

}
testfile=File.open('spec/fixtures/hiera/test.yaml', 'w')
testfile.puts teststring
testfile.close

# setup class test
teststring = %Q{
require 'spec_helper'

describe '#{module_name}' do
  let(:hiera_config) { 'spec/fixtures/hiera/hiera.yaml' }
  hiera = Hiera.new(:config => 'spec/fixtures/hiera/hiera.yaml')
  it { should compile }
  it { should compile.with_all_deps }
end

}
testfile=File.open('spec/classes/role_packages_spec.rb', 'w')
testfile.puts teststring
testfile.close
